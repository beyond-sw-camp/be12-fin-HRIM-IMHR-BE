server:
  port: 8080
spring:
#  batch:
#    job:
#      name: rankJob
#      enabled: false
#    jdbc:
#      initialize-schema: always
#  application:
#    name: chatting
#  kafka:
#    bootstrap-servers: 192.0.5.2:9092
#    consumer:
#      group-id: chatting-group
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_ADDR}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          starttls:
            enable: true
            required: true
          auth: true
          timeout: 5000
  datasource:
    url: ${DB_URL}
    driver-class-name: org.mariadb.jdbc.Driver
    username: ${DB_USER}
    password: ${DB_PASSWORD}
    hikari:
      maximum-pool-size: 20           # 동시에 사용할 수 있는 커넥션 수 제한
      minimum-idle: 5                 # 최소 유휴 커넥션 수
      idle-timeout: 60000             # 유휴 커넥션 1분 후 정리 (ms)
      max-lifetime: 1800000           # 커넥션 30분 후 강제 종료 (ms)
      connection-timeout: 30000       # 커넥션 가져오기를 30초 기다림
      leak-detection-threshold: 20000 # 커넥션 20초 이상 사용 시 로그로 누수 경고
  jpa:
    database-platform: org.hibernate.dialect.MariaDBDialect
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true

  data:
    mongodb:
#      uri: mongodb://${DB_USER}:${DB_PASSWORD}@${MDB_URL}?authSource=hrim&replicaSet=${REPLICA_NAME}&readPreference=primary
      uri: ${MONGO_URI}
#  security:
#    oauth2:
#      client:
#        registration:
#          google:
#            client-id: ${GOOGLE_CLIENT_ID}
#            client-secret: ${GOOGLE_SECRET}
#            scope:
#              - email
#              - profile
#          kakao:
#            client-id: ${KAKAO_KEY}
#            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
#            authorization-grant-type: authorization_code
#            client-authentication-method: none
#            client-name: Kakao
#            scope: # ?????? ? ??? ???
#              - profile_nickname

#
#  cloud:
#    aws:
#      credentials:
#        access-key: ${AWS_ACCESS_KEY}
#        secret-key: ${AWS_SECRET_KEY}
#      s3:
#        bucket: viewiubucket
#      region:
#        static: ${AWS_REGION}
#  kafka:
#    bootstrap-servers: 192.0.5.1:9092
#    consumer:
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      group-id: ciu-group
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#  sql:
#    init:
#      mode: always

management:
  endpoints:
    web:
      exposure:
        include: health,prometheus  # 기존 health 유지 + prometheus 추가
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true                 # prometheus endpoint 활성화
  health:
    db:
      enabled: true
    mail:
      enabled: false
    diskspace:
      enabled: false
    ping:
      enabled: false
    ssl:
      enabled: false
  prometheus:
    metrics:
      export:
        enabled: true


logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.orm.jdbc.bind: trace

jwt:
  secret: ${JWT_SECRET}
  expired: ${JWT_EXPIRED}

project:
  upload:
    path: ${UPLOAD_PATH}

file:
  upload-path: ${UPLOAD_PATH}